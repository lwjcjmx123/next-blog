// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts   Post[]
  uploads Upload[]

  @@map("users")
}

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?     @db.Text
  content     String      @db.LongText
  published   Boolean     @default(false)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String
  categoryId  String?
  
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags     Tag[]     @relation("PostTags")

  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts Post[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[] @relation("PostTags")

  @@map("tags")
}

model Project {
  id           String   @id @default(cuid())
  title        String
  slug         String   @unique
  description  String   @db.Text
  content      String?  @db.LongText
  technologies String   @db.Text // JSON array of technologies
  githubUrl    String?
  liveUrl      String?
  imageUrl     String?
  featured     Boolean  @default(false)
  published    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("projects")
}

model Resume {
  id        String   @id @default(cuid())
  data      String   @db.LongText // JSON data for resume
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resume")
}

model Upload {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimetype     String
  encoding     String
  url          String
  size         Int
  folder       String   @default("general")
  uploadedById String
  createdAt    DateTime @default(now())
  
  uploadedBy User @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("uploads")
}

enum Role {
  USER
  ADMIN
}